## -*- coding: utf-8 -*-
<%inherit file="skeleton.tmp"/>
<%namespace name="clk_gen" file="clk_gen.tmp"/>
<%namespace name="clk_delay" file="clk_delay.tmp"/>
<%namespace name="prom" file="prom.tmp"/>
<%namespace name="decode" file="decode.tmp"/>
<%namespace name="reg_dc" file="reg_dc.tmp"/>
<%namespace name="_exec" file="exec.tmp"/>
<%namespace name="reg_wb" file="reg_wb.tmp"/>
<%namespace name="mem_acc" file="mem_acc.tmp"/>
entity core_c is
<%block name="entity">
	port
	(			
	CLK	:	in	std_logic;
	CLK2X	:	in	std_logic;
	RESET	:	in	std_logic;
	NYET	:	in	${oc.io_flag_t()};
	IO_IN	:	in	${oc.io_bus_t()};
	IO_WR	:	out ${oc.io_flag_t()};
	IO_RD	:	out ${oc.io_flag_t()};
	IO_OUT	:	out	${oc.io_bus_t()};
	SRAM_ZA	:	out std_logic_vector(19 downto 0);
	SRAM_XWA:	out std_logic;
	SRAM_ZD	:	inout std_logic_vector(31 downto 0)
	);				
</%block>
end core_c;
architecture RTL of core_c is
component clk_gen is
${clk_gen.entity()}
end component;
component clk_delay is
${clk_delay.entity()}
end component;

component prom is
${prom.entity()}
end component;

component decode is
${decode.entity()}
end component;
component reg_dc is
${reg_dc.entity()}
end component;
component exec is
${_exec.entity()}
end component;
component reg_wb is
${reg_wb.entity()}
end component;
component mem_acc is
${mem_acc.entity()}
end component;

	signal clk_inv : std_logic;

	signal	pc :	${oc.pc_t()};
	signal	prom_out	:	${oc.ir_t()};
	signal	ir	:	${oc.ir_t()};

	signal	FramePointer	: ${oc.ram_addr_t()};
	signal	n_reg, n_reg_dly	:	${oc.reg_index_t()};
	signal	reg_in, reg_in_dly	:	${oc.reg_t()};
	signal	reg_cond, reg_cond_dly	:	std_logic_vector (3 downto 0);
	signal	fr_flag, fr_flag_dly :	std_logic;
	signal	REG_S	:	${oc.reg_t()};
	signal	REG_T	:	${oc.reg_t()};
	signal	REG_D	:	${oc.reg_t()};
	signal	FREG_S	:	${oc.reg_t()};
	signal	FREG_T	:	${oc.reg_t()};
	signal	FREG_D	:	${oc.reg_t()};
<% num_list = map ((lambda x : '%02d' % x), xrange(32)) %>
%for x in num_list:
	signal	REG_${x}	:	${oc.reg_t()};
%endfor
%for x in num_list:
	signal	FREG_${x}	:	${oc.reg_t()};
%endfor
	signal	RAM_ADDR	:	${oc.ram_addr_t()};
	signal	RAM_IN	:	${oc.reg_t()};
	signal	RAM_OUT	:	${oc.reg_t()};
	signal	ram_wen	:	std_logic;

	signal	LR_IN	:	${oc.pc_t()};
	signal	LR_OUT	:	${oc.pc_t()};
	signal	LinkRegister	:	${oc.pc_t()};
	signal	input_flag :	${oc.io_flag_t()};

begin			

-- clk(state machine)
	process (CLK2X)
	begin
		if rising_edge(CLK2X) then
			clk_inv <= clk;
		end if;
	end process;
	
-- fetch phase
	prom_u	:	prom port map(CLK2X, pc(${oc.prom_msb()} downto 0), prom_out);

-- decode phase
	dec_u	:	decode port map(CLK, prom_out, REG_01, LR_OUT, input_flag,
					ir, FramePointer, LinkRegister);
	regdec_rs:reg_dc port map(CLK, ${REGs()}, prom_out(25 downto 21), REG_S);
	regdec_rt:reg_dc port map(CLK, ${REGs()}, prom_out(20 downto 16), REG_T);
	regdec_rd:reg_dc port map(CLK, ${REGs()}, prom_out(15 downto 11), REG_D);
	regdec_frs:reg_dc port map(CLK, ${FREGs()}, prom_out(25 downto 21), FREG_S);
	regdec_frt:reg_dc port map(CLK, ${FREGs()}, prom_out(20 downto 16), FREG_T);
	regdec_frd:reg_dc port map(CLK, ${FREGs()}, prom_out(15 downto 11), FREG_D);

-- exec phase
	exec_u	:	exec port map(CLK, CLK2X, RESET, ir, pc,
		 REG_S, REG_T, REG_D, FREG_S, FREG_T, FREG_D, FramePointer, LinkRegister,
		 LR_IN, pc, n_reg, reg_in, fr_flag, RAM_ADDR, RAM_IN, reg_cond,
		 ram_wen);

	process(CLK)
	begin
		if rising_edge(CLK) then

			reg_cond_dly <= reg_cond;
			n_reg_dly <= n_reg;
			reg_in_dly <= reg_in;
			fr_flag_dly <= fr_flag;
		end if;
	end process;

-- memory access phase
	memacc_u	: mem_acc port map (clk_inv, CLK, ram_wen, RAM_ADDR, RAM_IN,
							RAM_OUT, IO_IN, IO_WR, IO_RD, IO_OUT,
							SRAM_ZA,SRAM_XWA,SRAM_ZD);
	
-- write back phase
	regwb_u	:	reg_wb port map(CLK, RESET,
		 n_reg_dly, reg_in_dly, LR_IN, RAM_OUT, fr_flag_dly, reg_cond_dly,
		 ${REGs()}, ${FREGs()}, LR_OUT);

end RTL;			
<%namespace name="oc" file="macro.tmp"/>
<%def name="REGs()">
		 REG_00, REG_01, REG_02, REG_03, REG_04, REG_05, REG_06, REG_07, 
		 REG_08, REG_09, REG_10, REG_11, REG_12, REG_13, REG_14, REG_15, 
		 REG_16, REG_17, REG_18, REG_19, REG_20, REG_21, REG_22, REG_23, 
		 REG_24, REG_25, REG_26, REG_27, REG_28, REG_29, REG_30, REG_31
</%def>
<%def name="FREGs()">
		 FREG_00, FREG_01, FREG_02, FREG_03, FREG_04, FREG_05, FREG_06, FREG_07, 
		 FREG_08, FREG_09, FREG_10, FREG_11, FREG_12, FREG_13, FREG_14, FREG_15, 
		 FREG_16, FREG_17, FREG_18, FREG_19, FREG_20, FREG_21, FREG_22, FREG_23, 
		 FREG_24, FREG_25, FREG_26, FREG_27, FREG_28, FREG_29, FREG_30, FREG_31
</%def>
