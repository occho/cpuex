.code64
.section .text
.global _start
.align 16
min_caml_create_array:
	shll		$2, %r11d
	movl		%r11d, %edx
	addl		%r12d, %edx
	movl		%edx, %r14d
	movl		%r12d, %r11d
.align 16
CREATE_ARRAY_LOOP:
	cmpl		%r12d, %r14d
	jl		CREATE_ARRAY_END
	movl		%r14d, %edx
	cmpl		%r12d, %edx
	je		CREATE_ARRAY_END
	movl		%r13d, -0(%r12d)
	addl		$4, %r12d
	jmp		CREATE_ARRAY_LOOP
.align 16
CREATE_ARRAY_END:
	ret		
.align 16
min_caml_create_float_array:
	shll		$2, %r11d
	movl		%r11d, %edx
	addl		%r12d, %edx
	movl		%edx, %r13d
	movl		%r12d, %r11d
.align 16
CREATE_FLOAT_ARRAY_LOOP:
	cmpl		%r12d, %r13d
	jl		CREATE_FLOAT_ARRAY_END
	movl		%r13d, %edx
	cmpl		%r12d, %edx
	je		CREATE_FLOAT_ARRAY_END
	movss		%xmm0, -0(%r12d)
	addl		$4, %r12d
	jmp		CREATE_FLOAT_ARRAY_LOOP
.align 16
CREATE_FLOAT_ARRAY_END:
	ret		
.align 16
min_caml_floor:
	movss		%xmm0, %xmm1
	movl		$FLOAT_ZERO, %r11d
	movss		-0(%r11d), %xmm9
	comiss		%xmm0, %xmm9
	jb		FLOOR_POSITIVE
	comiss		%xmm0, %xmm9
	je		FLOOR_POSITIVE
.align 16
FLOOR_NEGATIVE:
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	movl		$FLOAT_MAGICF, %r11d
	movss		-0(%r11d), %xmm2
	comiss		%xmm2, %xmm0
	jb		FLOOR_NEGATIVE_MAIN
	comiss		%xmm2, %xmm0
	je		FLOOR_NEGATIVE_MAIN
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
FLOOR_NEGATIVE_MAIN:
	addss		%xmm2, %xmm0
	subss		%xmm2, %xmm0
	movd		%xmm1, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm1
	comiss		%xmm0, %xmm1
	jb		FLOOR_RET2
	comiss		%xmm0, %xmm1
	je		FLOOR_RET2
	addss		%xmm2, %xmm0
	movl		$FLOAT_ONE, %r11d
	movss		-0(%r11d), %xmm6
	addss		%xmm6, %xmm0
	subss		%xmm2, %xmm0
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
FLOOR_POSITIVE:
	movl		$FLOAT_MAGICF, %r11d
	movss		-0(%r11d), %xmm2
	comiss		%xmm2, %xmm0
	jb		FLOOR_POSITIVE_MAIN
	comiss		%xmm2, %xmm0
	je		FLOOR_POSITIVE_MAIN
	ret		
.align 16
FLOOR_POSITIVE_MAIN:
	movss		%xmm0, %xmm1
	addss		%xmm2, %xmm0
	movss		%xmm0, -0(%r9d)
	movl		-0(%r9d), %r13d
	subss		%xmm2, %xmm0
	movss		%xmm0, -0(%r9d)
	movl		-0(%r9d), %r13d
	comiss		%xmm1, %xmm0
	jb		FLOOR_RET
	comiss		%xmm1, %xmm0
	je		FLOOR_RET
	movl		$FLOAT_ONE, %r11d
	movss		-0(%r11d), %xmm6
	subss		%xmm6, %xmm0
.align 16
FLOOR_RET:
	ret		
.align 16
FLOOR_RET2:
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
min_caml_ceil:
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	call		min_caml_floor
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
min_caml_float_of_int:
	cmpl		$0, %r11d
	jg		ITOF_MAIN
	movl		$0, %edx
	cmpl		%r11d, %edx
	je		ITOF_MAIN
	movl		$0, %edx
	subl		%r11d, %edx
	movl		%edx, %r11d
	call		ITOF_MAIN
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
ITOF_MAIN:
	movl		$FLOAT_MAGICF, %r14d
	movss		-0(%r14d), %xmm1
	movl		$FLOAT_MAGICFHX, %r14d
	movl		-0(%r14d), %r13d
	movl		$FLOAT_MAGICI, %r14d
	movl		-0(%r14d), %r14d
	cmpl		%r11d, %r14d
	jl		ITOF_BIG
	movl		%r14d, %edx
	cmpl		%r11d, %edx
	je		ITOF_BIG
	addl		%r13d, %r11d
	movl		%r11d, -0(%r9d)
	movss		-0(%r9d), %xmm0
	subss		%xmm1, %xmm0
	ret		
.align 16
ITOF_BIG:
	movl		$FLOAT_ZERO, %r13d
	movss		-0(%r13d), %xmm2
.align 16
ITOF_LOOP:
	subl		%r14d, %r11d
	addss		%xmm1, %xmm2
	cmpl		%r11d, %r14d
	jl		ITOF_LOOP
	movl		%r14d, %edx
	cmpl		%r11d, %edx
	je		ITOF_LOOP
	addl		%r13d, %r11d
	movl		%r11d, -0(%r9d)
	movss		-0(%r9d), %xmm0
	subss		%xmm1, %xmm0
	addss		%xmm2, %xmm0
	ret		
.align 16
min_caml_int_of_float:
	movl		$FLOAT_ZERO, %r11d
	movss		-0(%r11d), %xmm1
	comiss		%xmm0, %xmm1
	jb		FTOI_MAIN
	comiss		%xmm0, %xmm1
	je		FTOI_MAIN
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	call		FTOI_MAIN
	movl		$0, %edx
	subl		%r11d, %edx
	movl		%edx, %r11d
	ret		
.align 16
FTOI_MAIN:
	call		min_caml_floor
	movl		$FLOAT_MAGICF, %r13d
	movss		-0(%r13d), %xmm2
	movl		$FLOAT_MAGICFHX, %r13d
	movl		-0(%r13d), %r13d
	comiss		%xmm0, %xmm2
	jb		FTOI_BIG
	comiss		%xmm0, %xmm2
	je		FTOI_BIG
	addss		%xmm2, %xmm0
	movss		%xmm0, -0(%r9d)
	movl		-0(%r9d), %r11d
	subl		%r13d, %r11d
	ret		
.align 16
FTOI_BIG:
	movl		$FLOAT_MAGICI, %r14d
	movl		-0(%r14d), %r14d
	movl		$0, %r11d
.align 16
FTOI_LOOP:
	subss		%xmm2, %xmm0
	addl		%r14d, %r11d
	comiss		%xmm0, %xmm2
	jb		FTOI_LOOP
	comiss		%xmm0, %xmm2
	je		FTOI_LOOP
	addss		%xmm2, %xmm0
	movss		%xmm0, -0(%r9d)
	movl		-0(%r9d), %r14d
	subl		%r13d, %r14d
	movl		%r14d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	ret		
.align 16
min_caml_truncate:
	jmp		min_caml_int_of_float
.align 16
min_caml_read_int:
	movl		$0, %r11d
	xorl		%eax, %eax
	call		InChar
	movl		%eax, %r13d
	addl		%r13d, %r11d
	shll		$8, %r11d
	xorl		%eax, %eax
	call		InChar
	movl		%eax, %r13d
	addl		%r13d, %r11d
	shll		$8, %r11d
	xorl		%eax, %eax
	call		InChar
	movl		%eax, %r13d
	addl		%r13d, %r11d
	shll		$8, %r11d
	xorl		%eax, %eax
	call		InChar
	movl		%eax, %r13d
	addl		%r13d, %r11d
	ret		
.align 16
min_caml_read_float:
	call		min_caml_read_int
	movl		%r11d, -0(%r9d)
	movss		-0(%r9d), %xmm0
	ret		
.align 16
min_caml_start:
	movl		%r9d, %r10d
	subl		$32, %r9d
	movl		$1, %eax
	movl		$-1, %eax
	movl		$l.628, (GR27)
	movl		(GR27), %edx
	movss		-0(%edx), %xmm12
	movl		$l.648, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR17)
	movl		$l.639, (GR27)
	movl		(GR27), %edx
	movss		-0(%edx), %xmm5
	movl		$l.634, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR19)
	movl		$l.632, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR20)
	movl		$l.646, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR21)
	movl		$l.642, (GR27)
	movl		(GR27), %edx
	movss		-0(%edx), %xmm7
	movl		$l.636, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR23)
	movl		$l.630, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR24)
	movl		$l.620, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR25)
	movl		$l.618, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR26)
	movl		$l.616, (GR27)
	movl		(GR27), %edx
	movl		-0(%edx), %eax
	movl		%eax, (FR27)
	movl		$1, %r11d
	movl		$0, %r13d
	movl		%r12d, -28(%r10d)
	movl		%r10d, %r12d
	subl		$4, %r12d
	subl		$4, %r9d
	call		min_caml_create_array
	movl		-28(%r10d), %r12d
	movl		$1, %r11d
	movl		$0, %r13d
	movl		%r12d, -28(%r10d)
	movl		%r10d, %r12d
	subl		$8, %r12d
	call		min_caml_create_array
	movl		-28(%r10d), %r12d
	movl		$1, %r11d
	movl		$0, %r13d
	movl		%r12d, -28(%r10d)
	movl		%r10d, %r12d
	subl		$12, %r12d
	call		min_caml_create_array
	movl		-28(%r10d), %r12d
	movl		$1, %r11d
	movl		$0, %r13d
	movl		%r12d, -28(%r10d)
	movl		%r10d, %r12d
	subl		$16, %r12d
	call		min_caml_create_array
	movl		-28(%r10d), %r12d
	movl		$1, %r11d
	movl		$1, %r13d
	movl		%r12d, -28(%r10d)
	movl		%r10d, %r12d
	subl		$20, %r12d
	call		min_caml_create_array
	movl		-28(%r10d), %r12d
	movl		$1, %r11d
	movl		$0, %r13d
	movl		%r12d, -28(%r10d)
	movl		%r10d, %r12d
	subl		$24, %r12d
	call		min_caml_create_array
	movl		-28(%r10d), %r12d
	movss		(FR27), %xmm1
	call		abs_float.267
	sqrtss		%xmm0, %xmm0
	call		cos.290
	movss		%xmm0, %xmm2
	call		sin.288
	addss		(FR26), %xmm0
	movss		%xmm0, %xmm15
	subss		(FR25), %xmm15
	movss		%xmm15, %xmm6
	andl		$65535, %r11d
	orl		$983040, %r11d
	andl		$-65536, %r11d
	orl		$16960, %r11d
	call		min_caml_float_of_int
	mulss		%xmm6, %xmm0
	call		min_caml_int_of_float
	movl		%r11d, %ebp
	call		print_int.313
	addl		$4, %r9d
	call		Exit
.align 16
fabs.265:
	comiss		%xmm12, %xmm1
	jb		fjge_else.666
	movss		%xmm1, %xmm0
	ret		
.align 16
fjge_else.666:
	movd		%xmm1, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
abs_float.267:
	jmp		fabs.265
.align 16
fneg.269:
	movd		%xmm0, %eax
	xorl		$-2147483648, %eax
	movd		%eax, %xmm0
	ret		
.align 16
tan_sub.567:
	movss		(FR24), %xmm15
	comiss		%xmm15, %xmm2
	jb		fjge_else.667
	movss		%xmm2, %xmm15
	subss		(FR20), %xmm15
	movss		%xmm15, %xmm0
	movss		%xmm2, %xmm15
	subss		%xmm1, %xmm15
	movss		%xmm15, %xmm1
	movss		%xmm6, %xmm15
	divss		%xmm1, %xmm15
	movss		%xmm15, %xmm1
	movss		%xmm0, %xmm2
	jmp		tan_sub.567
.align 16
fjge_else.667:
	movss		%xmm1, %xmm0
	ret		
.align 16
tan.284:
	movss		%xmm0, %xmm15
	mulss		%xmm0, %xmm15
	movss		%xmm15, %xmm6
	movss		%xmm0, -0(%r9d)
	movss		%xmm12, %xmm1
	movss		(FR23), %xmm2
	subl		$8, %r9d
	call		tan_sub.567
	addl		$8, %r9d
	movss		%xmm0, %xmm1
	movss		(FR19), %xmm15
	subss		%xmm1, %xmm15
	movss		%xmm15, %xmm1
	movss		-0(%r9d), %xmm0
	divss		%xmm1, %xmm0
	ret		
.align 16
sin_sub.286:
	comiss		%xmm1, %xmm5
	jb		fjge_else.668
	comiss		%xmm12, %xmm1
	jb		fjge_else.669
	movss		%xmm1, %xmm0
	ret		
.align 16
fjge_else.669:
	addss		%xmm5, %xmm1
	jmp		sin_sub.286
.align 16
fjge_else.668:
	subss		%xmm5, %xmm1
	jmp		sin_sub.286
.align 16
sin.288:
	movss		%xmm2, %xmm1
	call		fabs.265
	movss		%xmm0, %xmm1
	subl		$4, %r9d
	call		sin_sub.286
	addl		$4, %r9d
	comiss		%xmm0, %xmm7
	jb		fjge_else.670
	comiss		%xmm2, %xmm12
	jb		fjge_else.672
	movl		$0, %r11d
	jmp		fjge_cont.673
.align 16
fjge_else.672:
	movl		$1, %r11d
.align 16
fjge_cont.673:
	jmp		fjge_cont.671
.align 16
fjge_else.670:
	comiss		%xmm2, %xmm12
	jb		fjge_else.674
	movl		$1, %r11d
	jmp		fjge_cont.675
.align 16
fjge_else.674:
	movl		$0, %r11d
.align 16
fjge_cont.675:
.align 16
fjge_cont.671:
	comiss		%xmm0, %xmm7
	jb		fjge_else.676
	movss		%xmm0, %xmm1
	jmp		fjge_cont.677
.align 16
fjge_else.676:
	movss		%xmm5, %xmm15
	subss		%xmm0, %xmm15
	movss		%xmm15, %xmm1
.align 16
fjge_cont.677:
	movss		(FR17), %xmm15
	comiss		%xmm1, %xmm15
	jb		fjge_else.678
	movss		%xmm1, %xmm0
	jmp		fjge_cont.679
.align 16
fjge_else.678:
	movss		%xmm7, %xmm15
	subss		%xmm1, %xmm15
	movss		%xmm15, %xmm0
.align 16
fjge_cont.679:
	mulss		(FR21), %xmm0
	subl		$4, %r9d
	call		tan.284
	addl		$4, %r9d
	movss		(FR20), %xmm15
	mulss		%xmm0, %xmm15
	movss		%xmm15, %xmm1
	mulss		%xmm0, %xmm0
	addss		(FR19), %xmm0
	divss		%xmm0, %xmm1
	cmpl		$0, %r11d
	jne		jeq_else.680
	movss		%xmm1, %xmm0
	jmp		fneg.269
.align 16
jeq_else.680:
	movss		%xmm1, %xmm0
	ret		
.align 16
cos.290:
	movss		(FR17), %xmm15
	subss		%xmm0, %xmm15
	movss		%xmm15, %xmm2
	jmp		sin.288
.align 16
div_binary_search.308:
	movl		%r14d, %edx
	addl		%ebx, %edx
	movl		%edx, %r11d
	movl		%r11d, %r13d
	shrl		$1, %r13d
	movl		%r13d, %edx
	imull		%edi, %edx
	movl		%edx, %r15d
	movl		%ebx, %edx
	subl		%r14d, %edx
	movl		%edx, %r11d
	cmpl		$1, %r11d
	jg		jle_else.681
	movl		%r14d, %r11d
	ret		
.align 16
jle_else.681:
	cmpl		%ebp, %r15d
	jl		jle_else.682
	cmpl		%ebp, %r15d
	jne		jeq_else.683
	movl		%r13d, %r11d
	ret		
.align 16
jeq_else.683:
	movl		%r13d, %ebx
	jmp		div_binary_search.308
.align 16
jle_else.682:
	movl		%r13d, %r14d
	jmp		div_binary_search.308
.align 16
print_int.313:
	cmpl		$0, %ebp
	jl		jge_else.684
	andl		$65535, %edi
	orl		$99942400, %edi
	andl		$-65536, %edi
	orl		$57600, %edi
	movl		$0, %r14d
	movl		$3, %ebx
	movl		%ebp, -0(%r9d)
	subl		$8, %r9d
	call		div_binary_search.308
	addl		$8, %r9d
	andl		$65535, %r13d
	orl		$99942400, %r13d
	andl		$-65536, %r13d
	orl		$57600, %r13d
	movl		%r11d, %edx
	imull		%r13d, %edx
	movl		%edx, %r13d
	movl		-0(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.685
	movl		$0, %ecx
	jmp		jle_cont.686
.align 16
jle_else.685:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jle_cont.686:
	andl		$65535, %edi
	orl		$9961472, %edi
	andl		$-65536, %edi
	orl		$38528, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -4(%r9d)
	subl		$12, %r9d
	call		div_binary_search.308
	addl		$12, %r9d
	andl		$65535, %r13d
	orl		$9961472, %r13d
	andl		$-65536, %r13d
	orl		$38528, %r13d
	movl		%r11d, %edx
	imull		%r13d, %edx
	movl		%edx, %r13d
	movl		-4(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.687
	cmpl		$0, %ecx
	jne		jeq_else.689
	movl		$0, %esi
	jmp		jeq_cont.690
.align 16
jeq_else.689:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %esi
.align 16
jeq_cont.690:
	jmp		jle_cont.688
.align 16
jle_else.687:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %esi
.align 16
jle_cont.688:
	andl		$65535, %edi
	orl		$983040, %edi
	andl		$-65536, %edi
	orl		$16960, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -8(%r9d)
	subl		$16, %r9d
	call		div_binary_search.308
	addl		$16, %r9d
	andl		$65535, %r13d
	orl		$983040, %r13d
	andl		$-65536, %r13d
	orl		$16960, %r13d
	movl		%r11d, %edx
	imull		%r13d, %edx
	movl		%edx, %r13d
	movl		-8(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.691
	cmpl		$0, %esi
	jne		jeq_else.693
	movl		$0, %ecx
	jmp		jeq_cont.694
.align 16
jeq_else.693:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jeq_cont.694:
	jmp		jle_cont.692
.align 16
jle_else.691:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jle_cont.692:
	andl		$65535, %edi
	orl		$65536, %edi
	andl		$-65536, %edi
	orl		$34464, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -12(%r9d)
	subl		$20, %r9d
	call		div_binary_search.308
	addl		$20, %r9d
	andl		$65535, %r13d
	orl		$65536, %r13d
	andl		$-65536, %r13d
	orl		$34464, %r13d
	movl		%r11d, %edx
	imull		%r13d, %edx
	movl		%edx, %r13d
	movl		-12(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.695
	cmpl		$0, %ecx
	jne		jeq_else.697
	movl		$0, %esi
	jmp		jeq_cont.698
.align 16
jeq_else.697:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %esi
.align 16
jeq_cont.698:
	jmp		jle_cont.696
.align 16
jle_else.695:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %esi
.align 16
jle_cont.696:
	movl		$10000, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -16(%r9d)
	subl		$24, %r9d
	call		div_binary_search.308
	addl		$24, %r9d
	movl		$10000, %r13d
	movl		%r11d, %edx
	imull		%r13d, %edx
	movl		%edx, %r13d
	movl		-16(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.699
	cmpl		$0, %esi
	jne		jeq_else.701
	movl		$0, %ecx
	jmp		jeq_cont.702
.align 16
jeq_else.701:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jeq_cont.702:
	jmp		jle_cont.700
.align 16
jle_else.699:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jle_cont.700:
	movl		$1000, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -20(%r9d)
	subl		$28, %r9d
	call		div_binary_search.308
	addl		$28, %r9d
	movl		%r11d, %edx
	imull		$1000, %edx
	movl		%edx, %r13d
	movl		-20(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.703
	cmpl		$0, %ecx
	jne		jeq_else.705
	movl		$0, %esi
	jmp		jeq_cont.706
.align 16
jeq_else.705:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %esi
.align 16
jeq_cont.706:
	jmp		jle_cont.704
.align 16
jle_else.703:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %esi
.align 16
jle_cont.704:
	movl		$100, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -24(%r9d)
	subl		$32, %r9d
	call		div_binary_search.308
	addl		$32, %r9d
	movl		%r11d, %edx
	imull		$100, %edx
	movl		%edx, %r13d
	movl		-24(%r9d), %ebp
	subl		%r13d, %ebp
	cmpl		$0, %r11d
	jg		jle_else.707
	cmpl		$0, %esi
	jne		jeq_else.709
	movl		$0, %ecx
	jmp		jeq_cont.710
.align 16
jeq_else.709:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jeq_cont.710:
	jmp		jle_cont.708
.align 16
jle_else.707:
	movl		$48, %r13d
	movl		%r13d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %ecx
.align 16
jle_cont.708:
	movl		$10, %edi
	movl		$0, %r14d
	movl		$10, %ebx
	movl		%ebp, -28(%r9d)
	subl		$36, %r9d
	call		div_binary_search.308
	addl		$36, %r9d
	movl		%r11d, %edx
	imull		$10, %edx
	movl		%edx, %r13d
	movl		-28(%r9d), %ebp
	movl		%ebp, %edx
	subl		%r13d, %edx
	movl		%edx, %r13d
	cmpl		$0, %r11d
	jg		jle_else.711
	cmpl		$0, %ecx
	jne		jeq_else.713
	movl		$0, %r14d
	jmp		jeq_cont.714
.align 16
jeq_else.713:
	movl		$48, %r14d
	movl		%r14d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %r14d
.align 16
jeq_cont.714:
	jmp		jle_cont.712
.align 16
jle_else.711:
	movl		$48, %r14d
	movl		%r14d, %edx
	addl		%r11d, %edx
	movl		%edx, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$1, %r14d
.align 16
jle_cont.712:
	movl		$48, %r11d
	addl		%r13d, %r11d
	movl		%r11d, %eax
	call		OutChar
	ret		
.align 16
jge_else.684:
	movl		$45, %r11d
	movl		%r11d, %eax
	call		OutChar
	movl		$0, %edx
	subl		%ebp, %edx
	movl		%edx, %ebp
	jmp		print_int.313

_start:
	xorq	%rbx, %rbx
	xorq	%rcx, %rcx
	xorq	%rsi, %rsi
	xorq	%rdi, %rdi
	xorq	%rbp, %rbp
	xorq	%r8, %r8
	xorq	%r9, %r9
	xorq	%r10, %r10
	xorq	%r11, %r11
	xorq	%r12, %r12
	xorq	%r13, %r13
	xorq	%r14, %r14
	xorq	%r15, %r15
	movl	$BOTTOM, %r9d
	movl	$TOP, %r12d
	movl	$BOTTOM, %r10d
	call	min_caml_start

.section .data
.align 16
FLOAT_ZERO:	.long	0x0
FLOAT_ONE:	.long	0x3f800000
FLOAT_MONE:	.long	0xbf800000
FLOAT_MAGICI:	.long	0x800000
FLOAT_MAGICF:	.long	0x4b000000
FLOAT_MAGICFHX:	.long	0x4b000000
l.648:	.long	0x3fc90fda
l.646:	.long	0x3f000000
l.642:	.long	0x40490fda
l.639:	.long	0x40c90fda
l.636:	.long	0x41100000
l.634:	.long	0x3f800000
l.632:	.long	0x40000000
l.630:	.long	0x40200000
l.628:	.long	0x0
l.620:	.long	0x42413381
l.618:	.long	0x40900000
l.616:	.long	0xc144ccc4

GR12: .long 0
GR13: .long 0
GR14: .long 0
GR15: .long 0
GR16: .long 0
GR17: .long 0
GR18: .long 0
GR19: .long 0
GR20: .long 0
GR21: .long 0
GR22: .long 0
GR23: .long 0
GR24: .long 0
GR25: .long 0
GR27: .long 0
GR30: .long 0
FR10: .long 0
FR11: .long 0
FR13: .long 0
FR14: .long 0
FR15: .long 0
FR17: .long 0
FR19: .long 0
FR20: .long 0
FR21: .long 0
FR23: .long 0
FR24: .long 0
FR25: .long 0
FR26: .long 0
FR27: .long 0
FR28: .long 0
FR29: .long 0
FR30: .long 0
TMP: .long 0
CNT: .quad 0
FNEG: .quad 0x-2147483648
.section .bss
.lcomm TOP, 0
.lcomm RAM, 33554432
.lcomm BOTTOM, 64
